(* Created by Dejanira Araiza-Illan and Arthur Richards, UoB, 2014 *)

theory Matrix

  type matrix

  (* note size compatibility assumed throughout - must be checked numerically *)  

end

  (* start with basic ring axioms *)
  (* see https://en.wikipedia.org/wiki/Ring_(mathematics) *)
  (* properties defined as implications to avoid need for sizing *)

theory MatrixAdd

  use import Matrix

  (* matrix addition *)
  function mat_add matrix matrix : matrix

  (* add is commutative: if c = a+b then c = b+a *)
  axiom mat_add_comm: forall a b c : matrix. (c = mat_add a b) -> (c = mat_add b a)

  (* add is associative iff d = a+(b+c) then d = (a+b)+c *)
  axiom mat_add_assoc: forall a b c : matrix. mat_add a (mat_add b c) = mat_add (mat_add a b) c

  lemma mat_add_comm3: forall a b : matrix. mat_add a b = mat_add b a
  lemma mat_add_comm2: forall a b c : matrix. (c = mat_add b a) -> (c = mat_add a b)
  lemma mat_add_assoc2: forall a b c x y : matrix. (x = mat_add a (mat_add b c)) /\ (y = mat_add (mat_add a b) c) -> (y=x)

  (* fun with permutations *)
  lemma mat_add_play1: forall a b c : matrix. (mat_add (mat_add a b) c) = (mat_add (mat_add a c) b)
  lemma mat_add_play2: forall a b c : matrix. (mat_add (mat_add a b) c) = (mat_add (mat_add c b) a)
  
  (* these next two seem to break things elsewhere *)
  (* even though they seem OK in themselves *)
  (* lemma mat_add_play6: forall a b c d : matrix. (mat_add (mat_add a b) (mat_add c d)) = mat_add (mat_add (mat_add a b) c) d *)
  (* lemma mat_add_play7: forall a b c d : matrix. (mat_add (mat_add a b) (mat_add c d)) = (mat_add (mat_add a d) (mat_add c b)) *)
  
end

theory MatrixZero

  use import Matrix
  use import MatrixAdd

  (* concept of a zero matrix *)
  predicate mat_is_zero matrix

  (* defined that if a+b=c and a=c then b=0 *)
  axiom mat_zero_def1: forall a b : matrix. ((mat_add a b) = a) <-> (mat_is_zero b)

  (* note - all zero matrices are not identical, as they may be different sizes *)
  (* so, zero-ness is defined as a predicate *)
  (* departure here from basic ring properties, which require unique zero ? *)

  lemma mat_zero_comm: forall a b : matrix. ((mat_add a b) = b) <-> (mat_is_zero a)
  (* and that if a+b=c and b=0 then a=c *)
  lemma mat_zero_def2: forall a b c : matrix. ((c = mat_add a b) /\ (mat_is_zero b)) -> (c = a)
  (* check the permutations *)
  lemma mat_zero_chk3: forall a b c : matrix. ((c = mat_add b a) /\ (c = a)) -> (mat_is_zero b)
  lemma mat_zero_chk4: forall a b c : matrix. ((c = mat_add b a) /\ (mat_is_zero b)) -> (c = a)
  lemma mat_zero_chk1: forall a b c : matrix. ((c = mat_add a b) /\ (c = b)) -> (mat_is_zero a)
  lemma mat_zero_chk2: forall a b c : matrix. ((c = mat_add a b) /\ (mat_is_zero a)) -> (c = b)

end

theory MatrixMinus

  use import Matrix
  use import MatrixAdd
  use import MatrixZero

  (* additive inverse - minus! *)
  function mat_minus matrix : matrix

  (* define equivalence: a+(-a) = 0 *)
  axiom mat_minus_def: forall a : matrix. mat_is_zero (mat_add a (mat_minus a))

  (* other way round (-a)+a = 0 *)
  lemma mat_minus_def2: forall a : matrix. mat_is_zero (mat_add (mat_minus a) a)
  (* b+a+(-a) = b *)
  lemma mat_minus_chk0: forall a b : matrix. mat_add (mat_add a b) (mat_minus a) = mat_add (mat_add a (mat_minus a)) b
  lemma mat_minus_chk1: forall a b : matrix. mat_add (mat_add a b) (mat_minus a) = b
  (* iff c = a+b then b = c+(-a) *)
  lemma mat_minus_add1: forall a b c : matrix. (c = mat_add a b) -> (b = mat_add c (mat_minus a)) 
  lemma mat_minus_add2: forall a b c : matrix. (b = mat_add c (mat_minus a)) -> (c = mat_add a b)

  (* and in another form *)
  lemma mat_minus_rev: forall a b : matrix. (a = mat_minus b) <-> (b = mat_minus a)
  (* check that a+b+(-b) = a *)
  lemma mat_minus_chk: forall a b c : matrix. (c = mat_add a (mat_add b (mat_minus b))) -> (c=a)
  (* lemma of uniqueness of minus? *)
  lemma mat_minus_unq: forall a b : matrix. (a=b) <-> (mat_minus a = mat_minus b)
  (* lets see if it gets -(-a) = a *)
  lemma mat_minus_twice: forall a : matrix. mat_minus (mat_minus a) = a

end

theory MatrixSubtract

  use import Matrix
  use import MatrixAdd
  use import MatrixZero
  use import MatrixMinus

  (* ----- SUBTRACTION ----- *)

  (* matrix subtraction *)
  function mat_subtract matrix matrix : matrix
  (* define subtract as addition of minus *)
  axiom mat_subtract_def: forall a b : matrix. mat_subtract a b = mat_add a (mat_minus b)

  (* iff c=a+b then a=c-b *)
  lemma mat_subtract1: forall a b c : matrix. (c = mat_add a b) -> (a = mat_subtract c b)
  lemma mat_subtract2: forall a b c : matrix. (a = mat_subtract c b) -> (c = mat_add a b)
  
  (* verify swapping terms in add *)
  lemma mat_sub_chk0: forall a b c : matrix. (c = mat_add b a) <-> (b = mat_subtract c a)
  (* and verify subtract works the other way round c=a+b then b=c-a *)
  lemma mat_sub_chk1: forall a b c : matrix. (c = mat_add a b) <-> (b = mat_subtract c a)
  (* verify subtraction undoes addition (a + b) - b = a *)
  lemma mat_sub_undo1: forall a b c : matrix. (c = mat_subtract (mat_add a b) b) -> (c=a)
  (* and also (a-b)+b = a *)
  lemma mat_sub_undo2: forall a b c : matrix. (c = mat_add (mat_subtract a b) b) -> (c=a)

  (* a+(b-c) = (a+b)-c *)
  lemma mat_sub_assoc0: forall a b c d : matrix. (d = mat_add a (mat_add b (c))) <-> (d = mat_add (mat_add a b) (c))
  lemma mat_sub_assoc2: forall a b c d : matrix. (d = mat_add a (mat_add b (mat_minus c))) -> (d = mat_add (mat_add a b) (mat_minus c))
  lemma mat_sub_assoc: forall a b c d : matrix. (d = mat_add a (mat_subtract b c)) <-> (d = mat_subtract (mat_add a b) c)

  lemma mat_test2: forall a b : matrix. mat_subtract a b = mat_minus (mat_subtract b a)
  lemma mat_test3: forall a b : matrix. mat_is_zero (mat_add (mat_add (mat_minus a) (mat_minus b)) (mat_add a b))
  lemma mat_test5: forall a b : matrix. mat_add (mat_add (mat_minus a) (mat_minus b)) (mat_add a b) = mat_add (mat_add a (mat_minus b)) (mat_add (mat_minus a) b)
  lemma mat_test6: forall a b : matrix. mat_add (mat_add (mat_minus a) (mat_minus b)) (mat_add a b) = mat_add (mat_add a (mat_minus a)) (mat_add (mat_minus b) b)
  (* NOTE - this one proves but takes more than 5s - set timeout to 20 to progress - with cvc3 anyway *)
  lemma mat_test4: forall a b : matrix. mat_minus (mat_add (mat_minus a) (mat_minus b)) = (mat_add a b)
  lemma mat_test1: forall a b : matrix. mat_add (mat_minus a) (mat_minus b) = mat_minus (mat_add a b)

  (* (a-b)-c = a-(b+c) *)
  lemma mat_sub_test: forall a b c : matrix. (mat_subtract (mat_subtract a b) c) = (mat_subtract a (mat_add b c))

  (* check associativity of subtract (a-b)-c = (a-c)-b *)
  lemma mat_assoc: forall a b c d e x y : matrix. (d = mat_subtract a b) /\ (x = mat_subtract d c) /\ (e = mat_subtract a c) /\ (y = mat_subtract e b) -> x=y

  (* (a-b)+c = a+(c-b) *)
  lemma mat_sub_chk3a: forall a b c x y : matrix. (x = mat_add (mat_subtract a b) c) /\ (y = mat_add a (mat_add c (mat_minus b))) -> x=y
  lemma mat_sub_chk3b: forall a b c x y : matrix. (x = mat_add a (mat_add c (mat_minus b))) /\ (y = mat_add a (mat_subtract c b)) -> x=y
  lemma mat_sub_chk3c: forall a b c : matrix. (mat_add (mat_subtract a b) c) = (mat_add a (mat_add c (mat_minus b)))
  lemma mat_sub_chk3: forall a b c x y : matrix. (x = mat_add (mat_subtract a b) c) /\ (y = mat_add a (mat_subtract c b)) -> x=y

end

theory MatrixMultiply

  use import Matrix
  use import MatrixAdd

  (* matrix multiplication *)
  function mat_mult matrix matrix : matrix
  (* mult is monoid a.(b.c) = (a.b).c *)
  axiom mat_mult_chk1: forall a b c : matrix. mat_mult a (mat_mult b c) = mat_mult (mat_mult a b) c
  (* right distributive (a+b).c = a.c + b.c *)
  axiom mat_mult_chk2: forall a b c : matrix. mat_mult a (mat_add b c) = mat_add (mat_mult a b) (mat_mult a c)
  (* left distributive a.(b+c) = a.b + a.c *)
  axiom mat_mult_chk3: forall a b c : matrix. mat_mult (mat_add a b) c = mat_add (mat_mult a c) (mat_mult b c)

  lemma matmult1: forall a b c d : matrix. (d = mat_mult a (mat_mult b c)) <-> (d = mat_mult (mat_mult a b) c)
  lemma matmult3a: forall a b c d : matrix. (d = mat_mult a (mat_add b c)) -> (d = mat_add (mat_mult a b) (mat_mult a c))
  lemma matmult3b: forall a b c d : matrix. (d = mat_add (mat_mult a b) (mat_mult a c)) -> (d = mat_mult a (mat_add b c))
  lemma matmult2a: forall a b c x y : matrix. ((x = mat_mult (mat_add a b) c) /\ (y = mat_add (mat_mult a c) (mat_mult b c))) -> (x=y)
  lemma matmult2b: forall a b c d : matrix. (d = mat_add (mat_mult a c) (mat_mult b c)) -> (d = mat_mult (mat_add a b) c)
  
end

theory MatrixMultZero

  use import Matrix
  use import MatrixAdd
  use import MatrixZero
  use import MatrixMinus
  use import MatrixSubtract
  use import MatrixMultiply

  (* multiplying by zero should give zero *)
  lemma mat_mult_zero1: forall a b c d : matrix. (d = mat_mult a (mat_add b c)) /\ (mat_is_zero c) -> (d = mat_mult a b)
  lemma mat_mult_zero1b: forall a b c d : matrix. (d = mat_mult a (mat_add b c)) -> (d = mat_add (mat_mult a b) (mat_mult a c))
  lemma mat_mult_zero1c: forall a b c d : matrix. (d = mat_add (mat_mult a b) (mat_mult a c)) ->  (d = mat_mult a (mat_add b c))

  lemma mat_mult_zero2a: forall a b c : matrix. (mat_mult a (mat_add b c) = a) -> (mat_add (mat_mult a b) (mat_mult a c) = a)
  lemma mat_mult_zero3: forall a b c : matrix. (mat_mult a (mat_add b c) = mat_mult a b) -> mat_is_zero (mat_mult a c)

  (* the main one - a*0 = 0 *)
  lemma mat_postmult_zero: forall a b : matrix. (mat_is_zero b) -> mat_is_zero (mat_mult a b) 

  lemma mat_premult_zero: forall a b : matrix. (mat_is_zero a) -> mat_is_zero (mat_mult a b) 

end

theory MatrixMultSub

  use import Matrix
  use import MatrixAdd
  use import MatrixZero
  use import MatrixMinus
  use import MatrixSubtract
  use import MatrixMultiply
  use import MatrixMultZero

  (* some lemmas for sanity checking *)
  (* a.(b-c) = a.b - a.c *)
  lemma mult_sub2: forall a b c x : matrix. (x = mat_mult a (mat_subtract b c)) <-> (x = mat_mult a (mat_add b (mat_minus c)))

  lemma mult_minus1: forall a b : matrix. mat_is_zero (mat_add (mat_mult (mat_minus a) b) (mat_mult a b))
  lemma mult_minus2: forall a b : matrix. mat_is_zero (mat_add (mat_mult a (mat_minus b)) (mat_mult a b))

  (* (-a).b = -(a.b) *)
  lemma mult_minus_pre: forall a b : matrix. mat_mult (mat_minus a) b = mat_minus (mat_mult a b)

  lemma mult_minus_post: forall a b : matrix. mat_mult a (mat_minus b) = mat_minus (mat_mult a b)

  (* lemma mult_sub3: forall a b : matrix. mat_mult a (mat_minus b) = mat_minus (mat_mult a b) *)
  (* lemma sanchk1: forall a b c x y : matrix. (x = mat_mult a (mat_subtract b c)) /\ (y = mat_subtract (mat_mult a b) (mat_mult a c)) -> (y=x) *)

end

theory MatrixQuadForm

  use import Matrix
  use import MatrixAdd
  use import MatrixZero
  use import MatrixMinus
  use import MatrixSubtract
  use import MatrixMultiply
  use import MatrixMultZero
  use import MatrixMultSub

  (* a.(b.c) = (a.b).c *)
  lemma quad_chk: forall a b c : matrix. mat_mult (mat_mult a b) c = mat_mult a (mat_mult b c)

  (* a.(b+c).d = a.(b.d + c.d) *)
  lemma quad_add1: forall a b c d : matrix. mat_mult (mat_mult a (mat_add b c)) d = mat_mult a (mat_add (mat_mult b d) (mat_mult c d))

  (* a*(b+c)*d = a*b*d + a*c*d *)
  lemma quad_add: forall a b c d : matrix. mat_mult (mat_mult a (mat_add b c)) d = mat_add (mat_mult a (mat_mult b d)) (mat_mult a (mat_mult c d))

  lemma quad_sub1: forall a b c d : matrix. mat_mult (mat_mult a (mat_subtract b c)) d = mat_add (mat_mult a (mat_mult b d)) (mat_mult a (mat_mult (mat_minus c) d))
  lemma quad_sub2: forall a b c d : matrix. mat_mult (mat_mult a (mat_subtract b c)) d = mat_add (mat_mult a (mat_mult b d)) (mat_minus (mat_mult a (mat_mult c d)))

  (* a*(b-c)*d = a*b*d - a*c*d *)
  lemma quad_sub: forall a b c d : matrix. mat_mult (mat_mult a (mat_subtract b c)) d = mat_subtract (mat_mult a (mat_mult b d)) (mat_mult a (mat_mult c d))

end

theory MatrixConcat

  use import Matrix
  use import MatrixAdd
  use import MatrixZero
  use import MatrixMinus
  use import MatrixSubtract
  use import MatrixMultiply
  use import MatrixMultZero

  (* --------- CONCAT ---------- *)

  (* concatenation of matrices *)
  function hcat matrix matrix: matrix
  function vcat matrix matrix: matrix
  (* axioms for addition, part by part *)
  (* done via intermediate symbols so only implied if sizes are OK *)
  (* [a;c] + [b;d] = [a+b; c+d] *)
  axiom mat_cat_add1: forall a b c d x y : matrix. (x = mat_add a b) /\ (y = mat_add c d) -> (vcat x y) = mat_add (vcat a c) (vcat b d)
  (* [a c] + [b d] = [a+b c+d] *)
  axiom mat_cat_add2: forall a b c d x y : matrix. (x = mat_add a b) /\ (y = mat_add c d) -> (hcat x y) = mat_add (hcat a c) (hcat b d)
  (* [a b] * [c;d] = a*c + b*d *)
  axiom mat_cat_mult: forall a b c d x y z : matrix. (x = mat_mult a c) /\ (y = mat_mult b d) /\ (z = mat_add x y) -> z = mat_mult (hcat a b) (vcat c d)

  (* matrix transpose *)
  function mat_transpose matrix : matrix
  (* [A B]^T = [A^T; B^T] *)
  axiom mat_transpose1: forall a b : matrix. mat_transpose (hcat a b) = vcat (mat_transpose a) (mat_transpose b)
  (* [A;B]^T = [A^T B^T] *)
  axiom mat_transpose2: forall a b : matrix. mat_transpose (vcat a b) = hcat (mat_transpose a) (mat_transpose b)
  axiom mattrans1: forall a b : matrix. mat_transpose (mat_mult a b) = mat_mult (mat_transpose b) (mat_transpose a)
  (* lemma transchk1: forall a b c : matrix. mat_mult (mat_transpose a) (mat_mult b c) = mat_mult (mat_mult (mat_transpose a) b) c *)
  (* lemma transchk2: forall a : matrix. mat_transpose (mat_transpose a) = a *)

end  
